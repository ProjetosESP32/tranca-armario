/**
 * @file Display.cpp
 * @author Marcus Vinícius (marcaovini07@gmail.com)
 * @brief Facilita a exibição de informações no display
 * @version 0.1
 * @date 2022-24-11
 *
 */

#include <Arduino.h>
#include "LoginDataManager.hpp"

#ifndef _OLED_HPP_
#define _OLED_HPP_

#define NUMBER_OF_CHARACTERS 27
#define NUMBER_OF_ROWS 3
#define NUMBER_OF_COLUMNS 9

constexpr unsigned char PROGMEM logoIfmt[] = {
    0x79, 0xfb, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xfb, 0xf0, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xfb, 0xf3, 0xd9, 0x9e, 0x7e, 0xf7, 0xec,
    0xdf, 0x9e, 0x00, 0x00, 0xfd, 0xfb, 0xf1, 0x9d, 0xb3, 0x18, 0x61, 0x8c, 0xc6, 0x33, 0x00, 0x00,
    0xfd, 0xfb, 0xf1, 0x9f, 0xb0, 0x18, 0x61, 0x8c, 0xc6, 0x33, 0x00, 0x00, 0x79, 0xfb, 0xf1, 0x9b,
    0x9e, 0x18, 0x61, 0x8c, 0xc6, 0x33, 0x00, 0x00, 0x00, 0x00, 0x01, 0x99, 0x83, 0x18, 0x61, 0x8c,
    0xc6, 0x33, 0x00, 0x00, 0xfd, 0xf8, 0x01, 0x99, 0xb3, 0x18, 0x61, 0x8c, 0xc6, 0x33, 0x00, 0x00,
    0xfd, 0xf8, 0x03, 0xd9, 0x9e, 0x18, 0xf1, 0x87, 0x86, 0x1e, 0x00, 0x00, 0xfd, 0xf8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xf8, 0x03, 0xf7, 0xef, 0x9f, 0xbe, 0x3c,
    0xc0, 0x00, 0x00, 0x00, 0xfd, 0xf8, 0x03, 0x06, 0x0c, 0x58, 0x31, 0x62, 0xc0, 0x00, 0x00, 0x00,
    0xfd, 0xf8, 0x03, 0xe7, 0xcc, 0x5f, 0x31, 0x7e, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x06,
    0x0c, 0x58, 0x3e, 0x62, 0xc0, 0x00, 0x00, 0x00, 0xfd, 0xfb, 0xf3, 0x06, 0x0c, 0x58, 0x31, 0x62,
    0xc0, 0x00, 0x00, 0x00, 0xfd, 0xfb, 0xf3, 0x07, 0xef, 0x9f, 0xb1, 0x62, 0xfc, 0x00, 0x00, 0x00,
    0xfd, 0xfb, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xfb, 0xf0, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xfb, 0xf2, 0x10, 0x04, 0x00, 0x01, 0xe0,
    0x00, 0x00, 0x00, 0x00, 0xfd, 0xfb, 0xf2, 0x11, 0xc4, 0x0e, 0x02, 0x05, 0x8e, 0x1c, 0x38, 0x70,
    0x00, 0x00, 0x03, 0x30, 0x27, 0x91, 0x02, 0x06, 0x11, 0x20, 0x40, 0x88, 0xfd, 0xf8, 0x02, 0xd1,
    0xe4, 0x11, 0x02, 0x64, 0x11, 0x1c, 0x38, 0x88, 0xfd, 0xf8, 0x02, 0x12, 0x24, 0x11, 0x02, 0x24,
    0x11, 0x02, 0x04, 0x88, 0xfd, 0xf8, 0x02, 0x12, 0x24, 0x11, 0x02, 0x24, 0x11, 0x22, 0x44, 0x88,
    0xfd, 0xf8, 0x02, 0x11, 0xe3, 0x8e, 0x01, 0xe4, 0x0e, 0x1c, 0x38, 0x70, 0xfd, 0xf8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00};

class Oled
{
private:

  LoginDataManager *data;

  const char alphabet[NUMBER_OF_CHARACTERS] = {
      'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',
      'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',
      's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '<'};

  void showTime(uint8_t hour, uint8_t minute, uint8_t second);

  void showDate(uint8_t day, uint8_t month, uint16_t year);

  int xCenterStringSize2(String stringCenter);

public:
  bool begin(LoginDataManager*);

  void showLogo();

  void showSpiffsFail();

  void showRtcFail();

  void showMP3Fail();

  void showTypedKey(String typedPassword);

  void showHomeScreen(uint8_t hour, uint8_t minute, uint8_t second, uint8_t day, uint8_t month, uint16_t year, String labName);

  void showMenuNames(uint8_t idUserShow, bool resetBuffer = false);

  void showTypedPassword(String typedPassword);

  void showLoginAccepted(String User);

  void showLockedLock(String typedPassword);

  void showLoginDenied();

  void showOpenDoor();

  void showSettingsTitle();

  void showMenuConfig();

  void showControls();

  void showConfigDate(uint8_t day, uint8_t month, uint16_t year);

  void showConfigTime(uint8_t hour, uint8_t minute);

  void wrongData();

  void showVirtualKeyboardForSetName(String typedName, uint8_t highLightedKey);

  char getAlphabetCharacter(uint8_t characterId);

  void showSetPassword(String password);

  void showSetExpirationDate(String expirationDate);

  void showSetPasswordConfirmation(String password);

  void showSetExpirationDateConfirmation(String expirationDate);

  void confirmationDeleteUser(String nameUser);

};
#endif